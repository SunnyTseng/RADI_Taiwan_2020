dir_pred_tif = here("data", "main_processed", "prediction_surface.tif"),
quantile = 0.1){
plan(multisession, workers = workers)
# prediction surface
pred_surf <- read_csv(dir_pred_surf)
pred_surf <- pred_surf %>%
drop_na() %>%
mutate(duration_minutes = duration_minutes,
effort_distance_km = effort_distance_km,
number_observers = number_observers,
hour = hour)
r <- raster(dir_pred_tif)
# function for extracting threshold
thre <- function(data_values, data_checklists){
# coordinates for setting threshold
observation_coors <- data_checklists %>%
filter(observation_count >= 1) %>%
select(longitude, latitude) %>%
SpatialPoints(proj4string = CRS("+init=epsg:4326"))
values <- data_values %>%
select(x, y) %>%
SpatialPoints(proj4string = CRS("+init=epsg:3826")) %>%
rasterize(., r, field = data_values$abd) %>%
extract(x = ., y = observation_coors)
values <- values[!is.na(values)] %>%
quantile(quantile)
return(values)
}
# main code here
if (family == "nb"){
map_pred <- models %>%
mutate(map_pred_nb = map(.x = m_nb, .f = ~ predict(.x, newdata = pred_surf, type = "link", se.fit = TRUE) %>%
as_tibble() %>%
transmute(abd = .x$family$linkinv(fit)) %>%
bind_cols(pred_surf) %>%
select(x, y, abd)))
threshold <- map_pred %>%
mutate(threshold = map2_dbl(.x = map_pred_nb, .y = train_data,
.f = ~ thre(data_values = .x, data_checklists = .y)))
cols <- c("#febd2a", "#fa9e3c", "#f1824d", "#e66d5d", "#d6546e",
"#c43e7f", "#ac2693", "#9310a1", "#7702a8", "#5702a5", "#360498",
"#0d0887")
from = threshold$threshold %>% min()
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 200)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
} else {
inv_link <- binomial(link = "cloglog")$linkinv
map_pred <- models %>%
mutate(map_pred_ziplss = map(.x = m_ziplss, .f = ~ predict(.x, newdata = pred_surf, type = "link") %>%
as.data.frame() %>%
transmute(abd = inv_link(V2) * exp(V1)) %>%
bind_cols(pred_surf) %>%
select(x, y, abd)))
threshold <- map_pred %>%
mutate(threshold = map2_dbl(.x = map_pred_ziplss, .y = train_data,
.f = ~ thre(data_values = .x, data_checklists = .y)))
cols <- c("#febd2a", "#fa9e3c", "#f1824d", "#e66d5d", "#d6546e",
"#c43e7f", "#ac2693", "#9310a1", "#7702a8", "#5702a5", "#360498",
"#0d0887")
from = threshold$threshold %>% min()
map_pred_plot <- threshold %>%
mutate(map_ziplss = map2(.x = map_pred_ziplss, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 200)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_ziplss, map_ziplss)
}
return(map_pred_plot)
}
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
models_map_nb$map_nb[[1]]
models_map_nb
models_map_nb$map_pred_nb
models_map_nb$map_pred_nb$abd
models_map_nb$map_pred_nb[[1]]$abd
models_map_nb$map_pred_nb[[1]]$abd %>% range()
prediction_maps <- function(models = models,
family = "nb",
workers = 8,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "main_processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "main_processed", "prediction_surface.tif"),
quantile = 0.1){
plan(multisession, workers = workers)
# prediction surface
pred_surf <- read_csv(dir_pred_surf)
pred_surf <- pred_surf %>%
drop_na() %>%
mutate(duration_minutes = duration_minutes,
effort_distance_km = effort_distance_km,
number_observers = number_observers,
hour = hour)
r <- raster(dir_pred_tif)
# function for extracting threshold
thre <- function(data_values, data_checklists){
# coordinates for setting threshold
observation_coors <- data_checklists %>%
filter(observation_count >= 1) %>%
select(longitude, latitude) %>%
SpatialPoints(proj4string = CRS("+init=epsg:4326"))
values <- data_values %>%
select(x, y) %>%
SpatialPoints(proj4string = CRS("+init=epsg:3826")) %>%
rasterize(., r, field = data_values$abd) %>%
extract(x = ., y = observation_coors)
values <- values[!is.na(values)] %>%
quantile(quantile)
return(values)
}
# main code here
if (family == "nb"){
map_pred <- models %>%
mutate(map_pred_nb = map(.x = m_nb, .f = ~ predict(.x, newdata = pred_surf, type = "link", se.fit = TRUE) %>%
as_tibble() %>%
transmute(abd = .x$family$linkinv(fit)) %>%
bind_cols(pred_surf) %>%
select(x, y, abd)))
threshold <- map_pred %>%
mutate(threshold = map2_dbl(.x = map_pred_nb, .y = train_data,
.f = ~ thre(data_values = .x, data_checklists = .y)))
cols <- c("#febd2a", "#fa9e3c", "#f1824d", "#e66d5d", "#d6546e",
"#c43e7f", "#ac2693", "#9310a1", "#7702a8", "#5702a5", "#360498",
"#0d0887")
from = threshold$threshold %>% min()
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 100)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
} else {
inv_link <- binomial(link = "cloglog")$linkinv
map_pred <- models %>%
mutate(map_pred_ziplss = map(.x = m_ziplss, .f = ~ predict(.x, newdata = pred_surf, type = "link") %>%
as.data.frame() %>%
transmute(abd = inv_link(V2) * exp(V1)) %>%
bind_cols(pred_surf) %>%
select(x, y, abd)))
threshold <- map_pred %>%
mutate(threshold = map2_dbl(.x = map_pred_ziplss, .y = train_data,
.f = ~ thre(data_values = .x, data_checklists = .y)))
cols <- c("#febd2a", "#fa9e3c", "#f1824d", "#e66d5d", "#d6546e",
"#c43e7f", "#ac2693", "#9310a1", "#7702a8", "#5702a5", "#360498",
"#0d0887")
from = threshold$threshold %>% min()
map_pred_plot <- threshold %>%
mutate(map_ziplss = map2(.x = map_pred_ziplss, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 100)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_ziplss, map_ziplss)
}
return(map_pred_plot)
}
target_species <- "Heterophasia auricularis"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
predictors
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "Boruta",
cor_threshold = 0.8,
max_vars = 20)
predictors
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels %>% head(1), family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
models_map_nb$map_pred_nb[[1]]$abd
models_map_nb$map_pred_nb[[1]]$abd %>% range()
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
models_map_nb$map_nb[[5]]
models_map_nb$map_nb[[6]]
models_map_nb$map_nb[[7]]
models_map_nb$map_nb[[8]]
models_map_nb$map_nb[[30]]
models_map_nb$map_nb[[35]]
models_map_nb$map_nb[[49]]
models_map_nb$map_nb[[50]]
models_map_nb$map_nb[[51]]
models_map_nb$map_nb[[52]]
models_map_nb$map_nb[[53]]
models_map_nb$map_nb[[1]]
models_map_nb$map_nb[[2]]
models_map_nb$map_nb[[3]]
models_map_nb$map_nb[[4]]
models_map_nb$map_nb[[5]]
models_map_nb$map_nb[[6]]
models_map_nb$map_nb[[7]]
models_map_nb$map_nb[[8]]
models_map_nb$map_nb[[9]]
models_map_nb$map_nb[[10]]
models_map_nb$map_nb[[11]]
models_map_nb$map_nb[[12]]
models_map_nb$map_nb[[15]]
models_map_nb$map_nb[[17]]
models_map_nb$map_nb[[19]]
models_map_nb$map_nb[[20]]
models_map_nb$map_pred_nb[[1]]$abd
models_map_nb$map_pred_nb[[1]]$abd%>% range()
models_map_nb$map_pred_nb[[2]]$abd%>% range()
models_map_nb$map_pred_nb[[25]]$abd%>% range()
models_map_nb$map_pred_nb[[4]]$abd%>% range()
stixels
stixels$train_data[[1]]
stixels$train_data[[1]]$observation_count %>% range()
stixels$train_data[[2]]$observation_count %>% range()
stixels$train_data[[3]]$observation_count %>% range()
stixels$train_data[[4]]$observation_count %>% range()
stixels$train_data[[5]]$observation_count %>% range()
stixels$train_data[[6]]$observation_count %>% range()
stixels$train_data[[7]]$observation_count %>% range()
stixels$train_data[[8]]$observation_count %>% range()
nb
models_map_nb
### Abundance maps
for(i in 1:53){
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_ziplss$map_ziplss[[i]])
dev.off()
}
models_map_nb$map_nb[[1]]
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[1]])
dev.off()
dev.off()
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[1]])
dev.off()
### Abundance maps
for(i in 1:53){
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[i]])
dev.off()
}
target_species <- "Myiomela leucura"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "Boruta",
cor_threshold = 0.8,
max_vars = 20)
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
### Abundance maps
for(i in 1:53){
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[i]])
dev.off()
}
data_preparation_target_species(dir_eBird = here("data", "processed", "data_eBird_qualified.csv"),
dir_predictors = here("data", "processed", "data_eBird_qualified_predictors.csv"),
target_species = "Pycnonotus sinensis",
path = here("data", "processed", paste0("data_eBird_qualified_combined_", "Pycnonotus sinensis", ".csv")))
target_species <- "Pycnonotus sinensis"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
data
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
### Abundance maps
for(i in 1:53){
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[i]])
dev.off()
}
data_preparation_target_species(dir_eBird = here("data", "processed", "data_eBird_qualified.csv"),
dir_predictors = here("data", "processed", "data_eBird_qualified_predictors.csv"),
target_species = "Hirundo rustica",
path = here("data", "processed", paste0("data_eBird_qualified_combined_", "Hirundo rustica", ".csv")))
target_species <- "Hirundo rustica"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
data
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
### Abundance maps
for(i in 1:53){
png(here("data", "processed", target_species,
paste0(target_species, "_week_", i, ".png")),
res = 300, width = 3, height = 4, units = 'in')
print(models_map_nb$map_nb[[i]])
dev.off()
}
