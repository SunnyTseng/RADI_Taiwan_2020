library(sf)
library(twmap)
# plot related
library(RColorBrewer)
library(lattice)
library(ggcorrplot)
library(plotly)
#################
### Functions ###
#################
# resolve namespace conflicts
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
target_species <- "Heterophasia auricularis"
target_species
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data
data %>% filter(detection == ``)
data %>% filter(detection == 1)
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
data_sub
data_sub %>% filter(detection == 1)
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
predictors
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 15)
predictors
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
predictors
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
stixels
print(stixels, n = 53)
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
nb
models = nb
duration_minutes = 60
effort_distance_km = 1
number_observers = 1
hour = 6
duration_minutes = 60,
effort_distance_km = 1
number_observers = 1
hour = 6
dir_pred_surf = here("data", "processed", "prediciton_surface.csv")
dir_pred_tif = here("data", "processed", "prediction_surface.tif")
quantile = 0.2
# prediction surface
pred_surf <- read_csv(dir_pred_surf)
pred_surf <- pred_surf %>%
drop_na() %>%
mutate(duration_minutes = duration_minutes,
effort_distance_km = effort_distance_km,
number_observers = number_observers,
hour = hour)
r <- raster(dir_pred_tif)
pred_surf
r
map_pred <- models %>%
mutate(map_pred_nb = map(.x = m_nb, .f = ~ predict(.x, newdata = pred_surf, type = "link", se.fit = TRUE) %>%
as_tibble() %>%
transmute(abd = .x$family$linkinv(fit)) %>%
bind_cols(pred_surf) %>%
select(x, y, abd)))
# function for extracting threshold
thre <- function(data_values, data_checklists){
# coordinates for setting threshold
observation_coors <- data_checklists %>%
filter(observation_count >= 1) %>%
select(longitude, latitude) %>%
SpatialPoints(proj4string = CRS("+init=epsg:4326"))
values <- data_values %>%
select(x, y) %>%
SpatialPoints(proj4string = CRS("+init=epsg:3826")) %>%
rasterize(., r, field = data_values$abd) %>%
extract(x = ., y = observation_coors)
values <- values[!is.na(values)] %>%
quantile(quantile)
return(values)
}
map_pred
map_pred$map_pred_nb
map_pred$map_pred_nb[[1]]
threshold <- map_pred %>%
mutate(threshold = map2_dbl(.x = map_pred_nb, .y = train_data,
.f = ~ thre(data_values = .x, data_checklists = .y)))
cols <- c("#febd2a", "#fa9e3c", "#f1824d", "#e66d5d", "#d6546e",
"#c43e7f", "#ac2693", "#9310a1", "#7702a8", "#5702a5", "#360498",
"#0d0887")
from = threshold$threshold %>% min()
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 10),
limits = c(from = from, to = 30)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
map_pred_plot
map_pred_plot$map_nb[[1]]
map_pred_plot$map_nb[[30]]
map_pred_plot$map_pred_nb[[1]]
threshold
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 30)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
map_pred_plot$map_pred_nb[[1]]
map_pred_plot$map_nb[[30]]
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 30)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
map_pred_plot$map_nb[[1]]
threshold$map_pred_nb[[1]]
threshold$map_pred_nb[[1]] %>% print(n = 100)
threshold$map_pred_nb[[1]] %>% print(n = 1000)
map_pred_plot <- threshold %>%
mutate(map_nb = map2(.x = map_pred_nb, .y = threshold, .f = ~ ggplot() +
geom_tile(data = .x, aes(x = x, y = y), fill = "#e6e6e6") +
geom_tile(data = .x %>% filter(abd > .y),
aes(x = x, y = y, fill = abd)) +
scale_fill_gradientn(trans = "log",
colours = cols,
breaks = c(0, 2, 50),
limits = c(from = from, to = 50)) +
#geom_sf(data = tw_county %>%
#          st_crop(xmin = 119, xmax = 123, ymin = 20, ymax = 26) %>%
#          st_transform(crs = 3826),
#          col = "white", fill = NA, size = 0.3) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank()))) %>%
select(day_of_year, threshold, map_pred_nb, map_nb)
map_pred_plot$map_nb[[1]]
### Author: Sunny ###
### Project: RADI ###
#####################
###############
### Library ###
###############
# data management
library(tidyverse)
library(data.table)
library(here)
library(lubridate)
library(janitor)
library(furrr)
library(ranger)
library(Boruta)
# GIS related
library(dggridR)
library(scam)
library(PresenceAbsence)
library(verification)
library(fields)
library(gridExtra)
library(raster)
library(rgdal)
library(sf)
library(twmap)
# plot related
library(RColorBrewer)
library(lattice)
library(ggcorrplot)
library(plotly)
#################
### Functions ###
#################
# resolve namespace conflicts
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
target_species <- "Heterophasia auricularis"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 5), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 5), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n() %>%
ungroup()
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 5), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
data = data_sub
method = "ranger"
cor_threshold = 0.8
max_vars = 15
data_sub_rf <- data %>%
select(detection,
duration_minutes, effort_distance_km, number_observers, hour,
starts_with("dtm"), starts_with("climate"), starts_with("landuse"), starts_with("other")) %>%
select(-c(climate_2010s_prec, climate_2010s_temp, climate_2010s_tmax, climate_2010s_tmin, climate_2010s_tra)) %>%
drop_na()
detection_freq <- data_sub_rf$detection %>% as.character() %>% as.numeric() %>% mean()
rf <- ranger(formula = detection ~ .,
data = data_sub_rf,
importance = "impurity",
probability = TRUE,
replace = TRUE,
sample.fraction = c(detection_freq, detection_freq))
rf <- ranger(formula = detection ~ .,
data = data_sub_rf,
importance = "impurity",
probability = TRUE,
replace = TRUE,
sample.fraction = c(detection_freq))
pi <- enframe(rf$variable.importance, "predictor", "importance") %>%
arrange(desc(importance))
pi
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
modelling_random_forest <- function(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 15){
data_sub_rf <- data %>%
select(detection,
duration_minutes, effort_distance_km, number_observers, hour,
starts_with("dtm"), starts_with("climate"), starts_with("landuse"), starts_with("other")) %>%
select(-c(climate_2010s_prec, climate_2010s_temp, climate_2010s_tmax, climate_2010s_tmin, climate_2010s_tra)) %>%
drop_na()
detection_freq <- data_sub_rf$detection %>% as.character() %>% as.numeric() %>% mean()
if (method == "Boruta") {
rf <- Boruta(formula = detection ~ ., data = data_sub_rf)
pi <- rf %>%
TentativeRoughFix() %>%
attStats() %>%
as.data.frame() %>%
setDT(keep.rownames = "predictor") %>%
as_tibble() %>%
select(predictor, meanImp) %>%
rename(importance = meanImp) %>%
arrange(desc(importance))
}else if (method == "ranger") {
rf <- ranger(formula = detection ~ .,
data = data_sub_rf,
importance = "impurity",
probability = TRUE,
replace = TRUE,
sample.fraction = c(detection_freq))
pi <- enframe(rf$variable.importance, "predictor", "importance") %>%
arrange(desc(importance))
}
predictors <- pi$predictor[1]
for (i in pi$predictor[1:max_vars]){
target <- data_sub %>% select(all_of(i))
comparison <- data_sub %>% select(all_of(predictors))
correlations <- cor(target, comparison)
if(all(abs(correlations) < cor_threshold)){
predictors <- c(predictors, i)
}
}
return(predictors)
}
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels, family = "nb", predictors = predictors, workers = 16)
predictors
stixels = stixels
# k is a gam parameters
# degrees of freedom for smoothing
k <- 5
# degrees of freedom for cyclic time of day smooth
k_time <- 7
time_knots <- list(time_observations_started = seq(0, 24, length.out = k_time))
# continuous predictors
# hold out time to treat seperately since it's cyclic
continuous_covs <- stixels$train_data[[1]] %>%
select(observation_count,
duration_minutes, effort_distance_km, number_observers,
hour, day, latitude, longitude,
predictors) %>%
select(-observation_count,
-hour, -day, -latitude, -longitude) %>%
names()
continuous_covs
# create model formula for predictors
gam_formula_rhs <- str_glue("s({var}, k = {k})",
var = continuous_covs, k = k) %>%
str_flatten(collapse = " + ") %>%
str_glue(" ~ ", .,
"+ s(hour, bs = \"cc\", k = {k})",
k = k_time) %>%
as.formula()
gam_formula_rhs
# model formula including response
gam_formula <- update.formula(observation_count ~ ., gam_formula_rhs)
inv_link <- binomial(link = "cloglog")$linkinv
result1 <- stixels %>%
mutate(m_nb = future_map(.x = train_data, .f = ~ gam(gam_formula,
data = .x,
family = "nb",
knots = time_knots)))
gam_formula
stixels
data_sub
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
stixels
data_sub
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
data_sub
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
data_sub
data
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data
data <- fread(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data
data <- fread(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv"))) %>%
as_tibble()
data
target_species <- "Myiomela leucura"
data <- fread(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv"))) %>%
as_tibble()
data
target_species <- "Myiomela leucura"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
