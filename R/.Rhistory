method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
predictors
modelling_random_forest <- function(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 15){
data_sub_rf <- data %>%
select(detection,
duration_minutes, effort_distance_km, number_observers, hour,
starts_with("dtm"), starts_with("climate"), starts_with("landuse"), starts_with("other")) %>%
select(-c(climate_2010s_prec, climate_2010s_temp, climate_2010s_tmax, climate_2010s_tmin, climate_2010s_tra)) %>%
drop_na()
detection_freq <- data_sub_rf$detection %>% as.character() %>% as.numeric() %>% mean()
if (method == "Boruta") {
rf <- Boruta(formula = detection ~ ., data = data_sub_rf)
pi <- rf %>%
TentativeRoughFix() %>%
attStats() %>%
as.data.frame() %>%
setDT(keep.rownames = "predictor") %>%
as_tibble() %>%
select(predictor, meanImp) %>%
rename(importance = meanImp) %>%
arrange(desc(importance))
}else if (method == "ranger") {
rf <- ranger(formula = detection ~ .,
data = data_sub_rf,
importance = "impurity",
probability = TRUE,
replace = TRUE,
sample.fraction = c(detection_freq))
pi <- enframe(rf$variable.importance, "predictor", "importance") %>%
arrange(desc(importance))
}
predictors <- pi$predictor[1]
for (i in pi$predictor[1:max_vars]){
target <- data_sub %>% select(all_of(i))
comparison <- data_sub %>% select(all_of(predictors))
correlations <- cor(target, comparison)
if(all(abs(correlations) < cor_threshold)){
predictors <- c(predictors, i)
}
}
return(predictors)
}
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
predictors
modelling_random_forest <- function(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 15){
data_sub_rf <- data %>%
select(detection,
duration_minutes, effort_distance_km, number_observers, hour,
starts_with("dtm"), starts_with("climate"), starts_with("landuse"), starts_with("other")) %>%
select(-c(climate_2010s_prec, climate_2010s_temp, climate_2010s_tmax, climate_2010s_tmin, climate_2010s_tra)) %>%
drop_na()
detection_freq <- data_sub_rf$detection %>% as.character() %>% as.numeric() %>% mean()
if (method == "Boruta") {
rf <- Boruta(formula = detection ~ ., data = data_sub_rf)
pi <- rf %>%
TentativeRoughFix() %>%
attStats() %>%
as.data.frame() %>%
setDT(keep.rownames = "predictor") %>%
as_tibble() %>%
select(predictor, meanImp) %>%
rename(importance = meanImp) %>%
arrange(desc(importance))
}else if (method == "ranger") {
rf <- ranger(formula = detection ~ .,
data = data_sub_rf,
importance = "impurity",
probability = TRUE,
replace = TRUE,
sample.fraction = c(detection_freq, detection_freq))
pi <- enframe(rf$variable.importance, "predictor", "importance") %>%
arrange(desc(importance))
}
predictors <- pi$predictor[1]
for (i in pi$predictor[1:max_vars]){
target <- data_sub %>% select(all_of(i))
comparison <- data_sub %>% select(all_of(predictors))
correlations <- cor(target, comparison)
if(all(abs(correlations) < cor_threshold)){
predictors <- c(predictors, i)
}
}
return(predictors)
}
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels %>% head(1), family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
########################
### Data Preparation ###
########################
### cleaned data for eBird and predictors, umcommend when needed
data_preparation_ebird(EBD = here("data", "raw", "Taiwan_ebd", "ebd_TW_relMar-2020", "ebd_TW_relMar-2020.txt"),
path = here("data", "processed", "data_eBird_qualified.csv"),
start_year = 2015,
effort_max_distance = 5,
effort_max_duration = 300,
effort_max_observers = 10)
### cleaned predictors data according to the eBird checklists, umcommend when needed
data_preparation_predictors(dir_tiff = here("data", "raw", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip"),
dir_eBird = here("data", "processed", "data_eBird_qualified.csv"),
path = here("data", "processed", "data_eBird_qualified_predictors.csv"))
### prediction surface for making predictions, umcommend when needed
data_preparation_prediction_surface(dir_tiff = here("data", "raw", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip"),
path_data_frame = here("data", "processed", "prediciton_surface.csv"),
path_tif = here("data", "processed", "prediction_surface.tif"))
data_preparation_target_species(dir_eBird = here("data", "processed", "data_eBird_qualified.csv"),
dir_predictors = here("data", "processed", "data_eBird_qualified_predictors.csv"),
target_species = "Heterophasia auricularis",
path = here("data", "processed", paste0("data_eBird_qualified_combined_", "Heterophasia auricularis", ".csv")))
target_species <- "Heterophasia auricularis"
rm(list = ls())
###############
### Library ###
###############
# data management
library(tidyverse)
library(data.table)
library(here)
library(lubridate)
library(janitor)
library(furrr)
library(ranger)
library(Boruta)
# GIS related
library(dggridR)
library(scam)
library(PresenceAbsence)
library(verification)
library(fields)
library(gridExtra)
library(raster)
library(rgdal)
library(sf)
library(twmap)
# plot related
library(RColorBrewer)
library(lattice)
library(ggcorrplot)
library(plotly)
#################
### Functions ###
#################
# resolve namespace conflicts
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
target_species <- "Heterophasia auricularis"
target_species <- "Myiomela leucura"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
data
target_species <- "Heterophasia auricularis"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
data
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
data
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels %>% head(1), family = "nb", predictors = predictors, workers = 16)
nb
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb$map_nb[[1]]
rm(list = ls())
### Library ###
###############
# data management
library(tidyverse)
library(data.table)
library(here)
library(lubridate)
library(janitor)
library(furrr)
library(ranger)
library(Boruta)
# GIS related
library(dggridR)
library(scam)
library(PresenceAbsence)
library(verification)
library(fields)
library(gridExtra)
library(raster)
library(rgdal)
library(sf)
library(twmap)
# plot related
library(RColorBrewer)
library(lattice)
library(ggcorrplot)
library(plotly)
#################
### Functions ###
#################
# resolve namespace conflicts
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
dir_tiff = here("data", "raw", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip")
path_data_frame = here("data", "processed", "prediciton_surface.csv")
path_tif = here("data", "processed", "prediction_surface.tif")
###
### Prediction surface and prediction surface fitting data
###
geo_tiff_3826 <- list.files(dir_tiff, pattern = "3826") %>%
paste0(dir_tiff, "/", .) %>%
map(.x = ., .f = ~ paste0(.x, "/", list.files(.x))) %>%
flatten_chr()
geo_tiff_3826
pred_surf <- geo_tiff_3826[1] %>% raster() %>% rasterToPoints() %>% as_tibble()
pred_surf
plot(pred_surf)
pred_surf <- geo_tiff_3826[1] %>% raster()
plot(pred_surf)
pred_surf <- geo_tiff_3826[1] %>% raster() %>% rasterToPoints() %>% as_tibble()
geo_tiff_3826
for(i in 2:100){
value_3826 <- geo_tiff_3826[2] %>% raster() %>% rasterToPoints() %>% as_tibble()
pred_surf <- full_join(pred_surf, value_3826, by = c("x", "y"))
}
geo_tiff_3826 %>%
str_extract(pattern = "(?<=121_).+.(?=\\.)") %>%
make_clean_names()
names(pred_surf)
for(i in 2:100){
value_3826 <- geo_tiff_3826[i] %>% raster() %>% rasterToPoints() %>% as_tibble()
pred_surf <- full_join(pred_surf, value_3826, by = c("x", "y"))
}
names(pred_surf)[c(-1, -2)]
data_preparation_prediction_surface <- function(dir_tiff = here("data", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip"),
path_data_frame = here("data", "main_processed", "prediciton_surface.csv"),
path_tif = here("data", "main_processed", "prediction_surface.tif")){
###
### Prediction surface and prediction surface fitting data
###
geo_tiff_3826 <- list.files(dir_tiff, pattern = "3826") %>%
paste0(dir_tiff, "/", .) %>%
map(.x = ., .f = ~ paste0(.x, "/", list.files(.x))) %>%
flatten_chr()
pred_surf <- geo_tiff_3826[1] %>% raster() %>% rasterToPoints() %>% as_tibble()
for(i in 2:100){
value_3826 <- geo_tiff_3826[i] %>% raster() %>% rasterToPoints() %>% as_tibble()
pred_surf <- full_join(pred_surf, value_3826, by = c("x", "y"))
}
names(pred_surf)[c(-1, -2)] <- geo_tiff_3826 %>%
str_extract(pattern = "(?<=121_).+.(?=\\.)") %>%
make_clean_names()
write_csv(pred_surf, path_data_frame)
###
### Create prediction surface
###
raster2 <- raster(geo_tiff_3826[99])
crs(raster2) <- CRS("+init=epsg:3826")
raster1 <- pred_surf %>%
select(c(1, 2, 3)) %>%
st_as_sf(coords = c("x", "y"))
st_crs(raster1) <- 3826
raster1 <- rasterize(raster1, raster2, field = 1) %>%
trim()
writeRaster(raster1, filename = path_tif, overwrite = TRUE)
}
data_preparation_prediction_surface <- function(dir_tiff = here("data", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip"),
path_data_frame = here("data", "main_processed", "prediciton_surface.csv"),
path_tif = here("data", "main_processed", "prediction_surface.tif")){
###
### Prediction surface and prediction surface fitting data
###
geo_tiff_3826 <- list.files(dir_tiff, pattern = "3826") %>%
paste0(dir_tiff, "/", .) %>%
map(.x = ., .f = ~ paste0(.x, "/", list.files(.x))) %>%
flatten_chr()
pred_surf <- geo_tiff_3826[1] %>% raster() %>% rasterToPoints() %>% as_tibble()
for(i in 2:100){
value_3826 <- geo_tiff_3826[i] %>% raster() %>% rasterToPoints() %>% as_tibble()
pred_surf <- full_join(pred_surf, value_3826, by = c("x", "y"))
}
names(pred_surf)[c(-1, -2)] <- geo_tiff_3826 %>%
str_extract(pattern = "(?<=121_).+.(?=\\.)") %>%
make_clean_names()
write_csv(pred_surf, path_data_frame)
###
### Create prediction surface
###
raster2 <- raster(geo_tiff_3826[99])
crs(raster2) <- CRS("+init=epsg:3826")
raster1 <- pred_surf %>%
select(c(1, 2, 3)) %>%
st_as_sf(coords = c("x", "y"))
st_crs(raster1) <- 3826
raster1 <- rasterize(raster1, raster2, field = 1) %>%
trim()
writeRaster(raster1, filename = path_tif, overwrite = TRUE)
}
rm(list = ls())
###############
### Library ###
###############
# data management
library(tidyverse)
library(data.table)
library(here)
library(lubridate)
library(janitor)
library(furrr)
library(ranger)
library(Boruta)
# GIS related
library(dggridR)
library(scam)
library(PresenceAbsence)
library(verification)
library(fields)
library(gridExtra)
library(raster)
library(rgdal)
library(sf)
library(twmap)
# plot related
library(RColorBrewer)
library(lattice)
library(ggcorrplot)
library(plotly)
#################
### Functions ###
#################
# resolve namespace conflicts
select <- dplyr::select
map <- purrr::map
projection <- raster::projection
# functions for different steps
source(here("R", "data_preparation_ebird.R"))
source(here("R", "data_preparation_predictors.R"))
source(here("R", "data_preparation_prediction_surface.R"))
source(here("R", "data_preparation_target_species.R"))
source(here("R", "modelling_random_forest.R"))
source(here("R", "modelling_stixel_grouping.R"))
source(here("R", "modelling_GAM.R"))
source(here("R", "modelling_evaluation.R"))
source(here("R", "prediction_maps.R"))
### prediction surface for making predictions, umcommend when needed
data_preparation_prediction_surface(dir_tiff = here("data", "raw", "Taiwan_environmental_dataset-master", "GeoTIFF_unzip"),
path_data_frame = here("data", "processed", "prediciton_surface.csv"),
path_tif = here("data", "processed", "prediction_surface.tif"))
### define target species and save the data for target species, umcommend when needed
data_preparation_target_species(dir_eBird = here("data", "processed", "data_eBird_qualified.csv"),
dir_predictors = here("data", "processed", "data_eBird_qualified_predictors.csv"),
target_species = "Heterophasia auricularis",
path = here("data", "processed", paste0("data_eBird_qualified_combined_", "Heterophasia auricularis", ".csv")))
target_species <- "Heterophasia auricularis"
data <- read_csv(here("data", "processed", target_species,
paste0("data_eBird_qualified_combined_", target_species, ".csv")))
data <- data %>%
mutate(detection = detection %>% as.factor(),
protocol_type = protocol_type %>% as.factor(),
other_proad = other_proad %>% as.factor(),
year = year %>% as.factor())
# sub sampling
set.seed(100)
data_sub <- data %>%
drop_na() %>%
mutate(cell = dgGEO_to_SEQNUM(dgconstruct(spacing = 1), longitude, latitude)$seqnum) %>%
group_by(detection, day, year, cell) %>%
sample_n(size = 1, replace = TRUE) %>%
ungroup()
# predictors selection, would take a while :)
predictors <- modelling_random_forest(data = data_sub,
method = "ranger",
cor_threshold = 0.8,
max_vars = 20)
#####################################
### Data split and create stixels ###
#####################################
stixels <- modelling_stixel_grouping(data = data_sub,
predictors = predictors,
split = 0.8,
temporal_resolution = 7,
stixel_height = 40)
nb <- modelling_GAM(stixels = stixels %>% head(1), family = "nb", predictors = predictors, workers = 16)
models_map_nb <- prediction_maps(models = nb,
family = "nb",
workers = 16,
duration_minutes = 60,
effort_distance_km = 1,
number_observers = 1,
hour = 6,
dir_pred_surf = here("data", "processed", "prediciton_surface.csv"),
dir_pred_tif = here("data", "processed", "prediction_surface.tif"),
quantile = 0.2)
models_map_nb[[1]]
models_map_nb$map_nb[[1]]
